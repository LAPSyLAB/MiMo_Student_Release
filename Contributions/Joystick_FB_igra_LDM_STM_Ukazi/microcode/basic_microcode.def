# A small set of microinstructions for the CPU
# (c) GPL3 Warren Toomey, 2012
#

fetch:	addrsel=pc irload=1 			# Address=PC, Load IR register
	pcload=1  pcsel=pc, opcode_jump		# PC=PC+1, jump to 2+OPC
#
# ALU operations on Rd,Rs,Rt
# add Rd,Rs,Rt
0:	aluop=add  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch			# ALU=+, ALU 2nd op = treg, write from aluout to reg

#
# Jump compared to zero operations
#
# JNEZ Rs,immed  ; If Rs != 0, PC <- immed else  PC <- PC + 2
40:	addrsel=pc  imload=1								            # Read Immediate operand -> IMRegister
	aluop=sub  op2sel=const0, if z then pcincr else jump		    # If z then pcincr else jump to immed; opsel=0 means value of 2 (constant 0 is selected!!!)

#
# li Rd,Immed    ; Load immediate Rd, immed   
63:	addrsel=pc  dwrite=1  regsrc=databus, goto pcincr				# additional increment (cause immed was read) and then new command
#	pcload=1  pcsel=pc, goto fetch                                  # not optimal way to do this, better goto to pcincr: instead (line above)

#
# sw Rd,immed    ; Store Rd into M[immed] Rd->M[immed]; 
65:	addrsel=pc  imload=1
	addrsel=immed  datawrite=1  datasel=dreg, goto pcincr			# additional increment (cause immed was read) and then new command
#	pcload=1  pcsel=pc, goto fetch                                  # not optimal way to do this, better goto to pcincr: instead (line above)

#
# Other code which we call
#
# Increment PC and goto new command; for all commands that use immediate operand - they need additional PC increment !
pcincr:	pcload=1  pcsel=pc, goto fetch

# Set address to immed and goto new command; for jumps to absolute immed address
jump:	pcload=1  pcsel=immed, goto fetch



#---------------------------------------------------------
#---------------------------------------------------------

# Used to perform a reative jump (PC + Immed). PC <- PC + Immed, goto fetch
jumprel: pcload=1 pcsel=pcimmed, goto fetch

# sub Rd,Rs,Rt (1) Rd <- Rs * Rt	PC <- PC + 1
1:	aluop=sub  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch		# ALU=-, ALU 2nd op = treg, write from aluout to reg


# mul Rd,Rs,Rt (2) Rd <- Rs * Rt		PC <- PC + 1
2: aluop=mul op2sel=treg dwrite=1 regsrc=aluout, goto fetch


# lsl Rd,Rs,Rt (11) Rd <- Rs << Rt		PC <- PC + 1
11: aluop=lsl op2sel=treg dwrite=1 regsrc=aluout, goto fetch


# lsr Rd,Rs,Rt (12) Rd <- Rs >> Rt		PC <- PC + 1
12: aluop=lsr op2sel=treg dwrite=1 regsrc=aluout, goto fetch


# asr Rd,Rs,Rt (13)	Rd <- Rs >> Rt (filled bits are the sign bit)	PC <- PC + 1
13: aluop=asr op2sel=treg dwrite=1 regsrc=aluout, goto fetch


# addi Rd,Rs,immed (16) Rd <- Rs + immed	PC <- PC + 2
16: addrsel=pc imload=1
	aluop=add op2sel=immed dwrite=1  regsrc=aluout, goto pcincr


# subi Rd,Rs,immed (17) Rd <- Rs - immed	PC <- PC + 2
17: addrsel=pc imload=1
	op2sel=immed aluop=sub regsrc=aluout dwrite=1, goto pcincr


# addc Rd,Rs,Rt,immed (31)
#	Rd <- Rs + Rt
#	if carry set, PC <- immed else  PC <- PC + 2
31: addrsel=pc imload=1 
	aluop=add op2sel=treg regsrc=aluout dwrite=1, if c then jump else pcincr  


# jeq Rs,Rt,immed (33)
#	if Rs == Rt, PC <- immed else  PC <- PC + 2
33: addrsel=pc imload=1
	aluop=sub op2sel=treg, if z then jump else pcincr


# beq Rs,Rt,immed (46)
#	if Rs == Rt, PC <- PC + immed else  PC <- PC + 2
46: addrsel=pc imload=1
	aluop=sub op2sel=treg, if z then jumprel else pcincr


# bne Rs,Rt,immed (47)
#	if Rs != Rt, PC <- PC + immed else  PC <- PC + 2
47: addrsel=pc imload=1
	aluop=sub op2sel=treg, if z then pcincr else jumprel


# br immed (58)
#	PC <- PC + immed
58: addrsel=pc imload=1, goto jumprel


# jsr immed (59)
#	R7--
#	M[R7] <- PC + 2, i.e. skip the current 2-word instruction
#	PC <- immed
59: addrsel=pc imload=1 
	pcsel=pc pcload=1
	aluop=sub op2sel=const1 swrite=1 regsrc=aluout
	datawrite=1 addrsel=sreg datasel=pc, goto jump


# rts  (60)
#	PC <- M[R7]
#	R7++
60: addrsel=sreg imload=1 
	pcsel=immed pcload=1
	aluop=add op2sel=const1 swrite=1 regsrc=aluout, goto fetch


#inc Rs (61)
#	Rs <- Rs + 1		PC <- PC + 1
61: aluop=add op2sel=const1 regsrc=aluout swrite=1, goto fetch


#dec Rs (62)
#	Rs <- Rs - 1		PC <- PC + 1
62: aluop=sub op2sel=const1 regsrc=aluout swrite=1, goto fetch


# lw Rd,immed (64)
#	Rd <- M[immed]		PC <- PC + 2
64: addrsel=pc  imload=1
	addrsel=immed regsrc=databus dwrite=1, goto pcincr


# lwi Rd,Rs,immed (66)
#	Rd <- M[Rs+immed]	PC <- PC + 2
66: addrsel=pc  imload=1
	aluop=add op2sel=immed addrsel=aluout regsrc=databus dwrite=1, goto pcincr


# swi Rd,Rs,immed (67)
#	M[Rs+immed] <- Rd	PC <- PC + 2
67: addrsel=pc  imload=1
	aluop=add op2sel=immed addrsel=aluout datasel=dreg datawrite=1, goto pcincr


# push Rd (68)
#	R7--
#	M[R7] <- Rd			PC <- PC + 1
68: aluop=sub op2sel=const1 regsrc=aluout swrite=1
	addrsel=sreg datasel=dreg datawrite=1, goto fetch


# pop  Rd (69)
#	Rd <- M[R7]
#	R7++				PC <- PC + 1
69: addrsel=sreg regsrc=databus dwrite=1
	aluop=add op2sel=const1 regsrc=aluout swrite=1, goto fetch


# move Rd,Rs (70)
#	Rd <- Rs			PC <- PC + 1
70: regsrc=sreg dwrite=1, goto fetch